Index: processcore/processes_openbsd_p.cpp
--- processcore/processes_openbsd_p.cpp.orig
+++ processcore/processes_openbsd_p.cpp
@@ -1,4 +1,5 @@
 /*
+#endif
     SPDX-FileCopyrightText: 2007 Manolo Valdes <nolis71cu@gmail.com>
 
     SPDX-License-Identifier: LGPL-2.0-or-later
@@ -7,6 +8,8 @@
 #include "process.h"
 #include "processes_local_p.h"
 
+#include "memoryinfo_p.h"
+
 #include <KLocalizedString>
 
 #include <QSet>
@@ -16,13 +19,13 @@
 #include <sys/sysctl.h>
 #include <sys/types.h>
 #include <sys/user.h>
-#if defined(__DragonFly__)
-#include <err.h>
-#include <sys/resourcevar.h>
-#endif
+#include <sys/types.h>
+#include <sys/sysctl.h>
+#include <sys/proc.h>
 #include <signal.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <sched.h>
 
 namespace KSysGuard
 {
@@ -63,67 +66,43 @@ bool ProcessesLocal::Private::readProc(long pid, struc
 
 void ProcessesLocal::Private::readProcStatus(struct kinfo_proc *p, Process *process)
 {
-    process->setUid(0);
-    process->setGid(0);
+    process->setEuid(p->p_uid);
+    process->setUid(p->p_ruid);
+    process->setEgid(p->p_svgid);
+    process->setGid(p->p_rgid);
     process->setTracerpid(-1);
-
-#if defined(__FreeBSD__) && __FreeBSD_version >= 500015
-    process->setUid(p->ki_uid);
-    process->setGid(p->ki_pgid);
-    process->setName(QString(p->ki_comm ? p->ki_comm : "????"));
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-    process->setUid(p->kp_uid);
-    process->setGid(p->kp_pgid);
-    process->setName(QString(p->kp_comm ? p->kp_comm : "????"));
-#else
-    process->setUid(p->kp_eproc.e_ucred.cr_uid);
-    process->setGid(p->kp_eproc.e_pgid);
-#endif
+    process->setName(QString::fromUtf8(p->p_comm ? p->p_comm : "????"));
 }
 
 void ProcessesLocal::Private::readProcStat(struct kinfo_proc *p, Process *ps)
 {
     int status;
     struct rusage pru;
-#if defined(__FreeBSD__) && __FreeBSD_version >= 500015
-    ps->setUserTime(p->ki_runtime / 10000);
-    ps->setNiceLevel(p->ki_nice);
-    ps->setVmSize(p->ki_size);
-    ps->setVmRSS(p->ki_rssize * getpagesize());
-    status = p->ki_stat;
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-    if (!getrusage(p->kp_pid, &pru)) {
-        errx(1, "failed to get rusage info");
-    }
-    ps->setUserTime(pru.ru_utime.tv_usec / 1000); /*p_runtime / 1000*/
-    ps->setNiceLevel(p->kp_nice);
-    ps->setVmSize(p->kp_vm_map_size);
-    ps->setVmRSS(p->kp_vm_rssize * getpagesize());
-    status = p->kp_stat;
-#else
-    ps->setUserTime(p->kp_proc.p_rtime.tv_sec * 100 + p->kp_proc.p_rtime.tv_usec / 100);
-    ps->setNiceLevel(p->kp_proc.p_nice);
-    ps->setVmSize(p->kp_eproc.e_vm.vm_map.size);
-    ps->setVmRSS(p->kp_eproc.e_vm.vm_rssize * getpagesize());
-    status = p->kp_proc.p_stat;
-#endif
-    ps->setSysTime(0);
 
+    // XXX ps->setUserTime(p->ki_rusage.ru_utime.tv_sec * 100 + p->ki_rusage.ru_utime.tv_usec / 10000);
+    // XXX ps->setSysTime(p->ki_rusage.ru_stime.tv_sec * 100 + p->ki_rusage.ru_stime.tv_usec / 10000);
+    ps->setNiceLevel(p->p_nice);
+    status = p->p_stat;
+
+    MemoryFields fields;
+    // XXX fields.rss = p->ki_rssize * getpagesize() / 1024;
+    fields.lastUpdate = std::chrono::steady_clock::now();
+    ps->memoryInfo()->imprecise = fields;
+    // XXX ps->memoryInfo()->vmSize = p->ki_size / 1024;
+    ps->addChange(Process::Memory);
+
     // "idle","run","sleep","stop","zombie"
     switch (status) {
-    case '0':
-        ps->setStatus(Process::DiskSleep);
-        break;
-    case '1':
+    case SRUN:
         ps->setStatus(Process::Running);
         break;
-    case '2':
+    case SSLEEP:
         ps->setStatus(Process::Sleeping);
         break;
-    case '3':
+    case SSTOP:
         ps->setStatus(Process::Stopped);
         break;
-    case '4':
+    case SZOMB:
         ps->setStatus(Process::Zombie);
         break;
     default:
@@ -132,12 +111,8 @@ void ProcessesLocal::Private::readProcStat(struct kinf
     }
 }
 
-void ProcessesLocal::Private::readProcStatm(struct kinfo_proc *p, Process *process)
+void ProcessesLocal::Private::readProcStatm(struct kinfo_proc*, Process*)
 {
-    // TODO
-
-    //     unsigned long shared;
-    //     process->setVmURSS(process->vmRSS - (shared * sysconf(_SC_PAGESIZE) / 1024));
 }
 
 bool ProcessesLocal::Private::readProcCmdline(long pid, Process *process)
@@ -175,13 +150,7 @@ long ProcessesLocal::getParentPid(long pid)
     long long ppid = -1;
     struct kinfo_proc p;
     if (d->readProc(pid, &p)) {
-#if defined(__FreeBSD__) && __FreeBSD_version >= 500015
-        ppid = p.ki_ppid;
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-        ppid = p.kp_ppid;
-#else
-        ppid = p.kp_eproc.e_ppid;
-#endif
+        ppid = p.p_ppid;
     }
     return ppid;
 }
@@ -213,18 +182,26 @@ QSet<long> ProcessesLocal::getAllPids()
     mib[0] = CTL_KERN;
     mib[1] = KERN_PROC;
     mib[2] = KERN_PROC_ALL;
-    sysctl(mib, 3, NULL, &len, NULL, 0);
-    p = (kinfo_proc *)malloc(len);
-    sysctl(mib, 3, p, &len, NULL, 0);
+    if (sysctl(mib, 3, NULL, &len, NULL, 0) == -1) {
+        return pids;
+    }
+    if ((p = (kinfo_proc *)malloc(len)) == NULL) {
+        return pids;
+    }
+    if (sysctl(mib, 3, p, &len, NULL, 0) == -1) {
+        free(p);
+        return pids;
+    }
 
     for (num = 0; num < len / sizeof(struct kinfo_proc); num++) {
-#if defined(__FreeBSD__) && __FreeBSD_version >= 500015
-        pids.insert(p[num].ki_pid);
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-        pids.insert(p[num].kp_pid);
-#else
-        pids.insert(p[num].kp_proc.p_pid);
-#endif
+        long pid = p[num].p_pid;
+        long long ppid = p[num].p_ppid;
+
+        // skip all process with parent id = 0 but init
+        if (ppid <= 0 && pid != 1) {
+            continue;
+        }
+        pids.insert(pid);
     }
     free(p);
     return pids;
@@ -250,13 +227,7 @@ Processes::Error ProcessesLocal::setNiceness(long pid,
 
 Processes::Error ProcessesLocal::setScheduler(long pid, int priorityClass, int priority)
 {
-    if (priorityClass == KSysGuard::Process::Other || priorityClass == KSysGuard::Process::Batch) {
-        priority = 0;
-    }
-    if (pid <= 0) {
-        return Processes::InvalidPid; // check the parameters
-    }
-    return Processes::NotSupported;
+    return Processes::NoError;
 }
 
 Processes::Error ProcessesLocal::setIoNiceness(long pid, int priorityClass, int priority)
@@ -271,40 +242,16 @@ bool ProcessesLocal::supportsIoNiceness()
 
 long long ProcessesLocal::totalPhysicalMemory()
 {
-    static int physmem_mib[] = {CTL_HW, HW_PHYSMEM};
-    /* get the page size with "getpagesize" and calculate pageshift from
-     * it */
-    int pagesize = ::getpagesize();
-    int pageshift = 0;
-    while (pagesize > 1) {
-        pageshift++;
-        pagesize >>= 1;
-    }
-    size_t Total = 0;
-    size_t size = sizeof(Total);
-    sysctl(physmem_mib, 2, &Total, &size, NULL, 0);
-    return Total /= 1024;
+    long phys_pages = sysconf(_SC_PHYS_PAGES);
+    long pagesize = sysconf(_SC_PAGESIZE);
+    if (phys_pages != -1 && pagesize != -1)
+        return ((uint64_t)phys_pages * (uint64_t)pagesize / 1024);
+    return 0;
 }
 
 long long ProcessesLocal::totalSwapMemory()
 {
     return 0;
-}
-
-long int KSysGuard::ProcessesLocal::numberProcessorCores()
-{
-    int mib[2];
-    int ncpu;
-    size_t len;
-
-    mib[0] = CTL_HW;
-    mib[1] = HW_NCPU;
-    len = sizeof(ncpu);
-
-    if (sysctl(mib, 2, &ncpu, &len, NULL, 0) == -1 || !len) {
-        return 1;
-    }
-    return len;
 }
 ProcessesLocal::~ProcessesLocal()
 {
