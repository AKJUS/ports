Index: ext/net/raw.rs
--- ext/net/raw.rs.orig
+++ ext/net/raw.rs
@@ -280,16 +280,7 @@ network_stream!(
     tokio::net::UnixListener,
     tokio::net::unix::SocketAddr,
     crate::io::UnixStreamResource
-  ],
-  [
-    Vsock,
-    vsock,
-    tokio_vsock::VsockStream,
-    tokio_vsock::VsockListener,
-    tokio_vsock::VsockAddr,
-    crate::io::VsockStreamResource
-  ]
-);
+  ]);
 
 #[cfg(not(unix))]
 network_stream!(
@@ -315,7 +306,7 @@ pub enum NetworkStreamAddress {
   Ip(std::net::SocketAddr),
   #[cfg(unix)]
   Unix(tokio::net::unix::SocketAddr),
-  #[cfg(unix)]
+  #[cfg(target_os = "linux")]
   Vsock(tokio_vsock::VsockAddr),
 }
 
@@ -332,7 +323,7 @@ impl From<tokio::net::unix::SocketAddr> for NetworkStr
   }
 }
 
-#[cfg(unix)]
+#[cfg(target_os = "linux")]
 impl From<tokio_vsock::VsockAddr> for NetworkStreamAddress {
   fn from(value: tokio_vsock::VsockAddr) -> Self {
     NetworkStreamAddress::Vsock(value)
@@ -351,7 +342,7 @@ pub enum TakeNetworkStreamError {
   #[class("Busy")]
   #[error("Unix socket is currently in use")]
   UnixBusy,
-  #[cfg(unix)]
+  #[cfg(target_os = "linux")]
   #[class("Busy")]
   #[error("Vsock socket is currently in use")]
   VsockBusy,
@@ -362,7 +353,7 @@ pub enum TakeNetworkStreamError {
   #[class(generic)]
   #[error(transparent)]
   ReuniteUnix(#[from] tokio::net::unix::ReuniteError),
-  #[cfg(unix)]
+  #[cfg(target_os = "linux")]
   #[class(generic)]
   #[error("Cannot reunite halves from different streams")]
   ReuniteVsock,
@@ -413,7 +404,7 @@ pub fn take_network_stream_resource(
     return Ok(NetworkStream::Unix(unix_stream));
   }
 
-  #[cfg(unix)]
+  #[cfg(target_os = "linux")]
   if let Ok(resource_rc) =
     resource_table.take::<crate::io::VsockStreamResource>(stream_rid)
   {
