From f34529641978c47ebd778d0e744acd12b3d9a906 Mon Sep 17 00:00:00 2001
From: Nick Wellnhofer <wellnhofer@aevum.de>
Date: Fri, 18 Apr 2025 17:22:36 +0200
Subject: [PATCH] Revert "valid: Remove duplicate error messages when streaming"

Index: valid.c
--- valid.c.orig
+++ valid.c
@@ -5554,6 +5554,12 @@ xmlValidGetElemDecl(xmlValidCtxtPtr ctxt, xmlDocPtr do
 		*extsubset = 1;
 	}
     }
+    if (elemDecl == NULL) {
+	xmlErrValidNode(ctxt, elem,
+			XML_DTD_UNKNOWN_ELEM,
+	       "No declaration for element %s\n",
+	       elem->name, NULL, NULL);
+    }
     return(elemDecl);
 }
 
@@ -5596,6 +5602,10 @@ xmlValidatePushElement(xmlValidCtxtPtr ctxt, xmlDocPtr
 		    ret = 0;
 		    break;
 		case XML_ELEMENT_TYPE_EMPTY:
+		    xmlErrValidNode(ctxt, state->node,
+				    XML_DTD_NOT_EMPTY,
+	       "Element %s was declared EMPTY this one has content\n",
+			   state->node->name, NULL, NULL);
 		    ret = 0;
 		    break;
 		case XML_ELEMENT_TYPE_ANY:
@@ -5606,10 +5616,20 @@ xmlValidatePushElement(xmlValidCtxtPtr ctxt, xmlDocPtr
 		    if ((elemDecl->content != NULL) &&
 			(elemDecl->content->type ==
 			 XML_ELEMENT_CONTENT_PCDATA)) {
+			xmlErrValidNode(ctxt, state->node,
+					XML_DTD_NOT_PCDATA,
+	       "Element %s was declared #PCDATA but contains non text nodes\n",
+				state->node->name, NULL, NULL);
 			ret = 0;
 		    } else {
 			ret = xmlValidateCheckMixed(ctxt, elemDecl->content,
 				                    qname);
+			if (ret != 1) {
+			    xmlErrValidNode(ctxt, state->node,
+					    XML_DTD_INVALID_CHILD,
+	       "Element %s is not declared in %s list of possible children\n",
+				    qname, state->node->name, NULL);
+			}
 		    }
 		    break;
 		case XML_ELEMENT_TYPE_ELEMENT:
@@ -5626,6 +5646,10 @@ xmlValidatePushElement(xmlValidCtxtPtr ctxt, xmlDocPtr
                             return(0);
                         }
 			if (ret < 0) {
+			    xmlErrValidNode(ctxt, state->node,
+					    XML_DTD_CONTENT_MODEL,
+	       "Element %s content does not follow the DTD, Misplaced %s\n",
+				   state->node->name, qname, NULL);
 			    ret = 0;
 			} else {
 			    ret = 1;
@@ -5675,6 +5699,10 @@ xmlValidatePushCData(xmlValidCtxtPtr ctxt, const xmlCh
 		    ret = 0;
 		    break;
 		case XML_ELEMENT_TYPE_EMPTY:
+		    xmlErrValidNode(ctxt, state->node,
+				    XML_DTD_NOT_EMPTY,
+	       "Element %s was declared EMPTY this one has content\n",
+			   state->node->name, NULL, NULL);
 		    ret = 0;
 		    break;
 		case XML_ELEMENT_TYPE_ANY:
@@ -5747,6 +5775,11 @@ xmlValidatePopElement(xmlValidCtxtPtr ctxt, xmlDocPtr 
 		    if (ret <= 0) {
                         if (ret == XML_REGEXP_OUT_OF_MEMORY)
                             xmlVErrMemory(ctxt);
+                        else
+			    xmlErrValidNode(ctxt, state->node,
+			                    XML_DTD_CONTENT_MODEL,
+	   "Element %s content does not follow the DTD, Expecting more children\n",
+			       state->node->name, NULL,NULL);
 			ret = 0;
 		    } else {
 			/*
@@ -5819,13 +5852,8 @@ xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr 
      * Fetch the declaration
      */
     elemDecl = xmlValidGetElemDecl(ctxt, doc, elem, &extsubset);
-    if (elemDecl == NULL) {
-	xmlErrValidNode(ctxt, elem,
-			XML_DTD_UNKNOWN_ELEM,
-	       "No declaration for element %s\n",
-	       elem->name, NULL, NULL);
+    if (elemDecl == NULL)
 	return(0);
-    }
 
     /*
      * If vstateNr is not zero that means continuous validation is
